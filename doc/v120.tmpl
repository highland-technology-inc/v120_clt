<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" []>

<book id="V120">
 <bookinfo>
  <title>V120 Linux Programmer's Manual</title>

  <authorgroup>

   <author>
    <firstname>Rob</firstname>
    <surname>Gaddi</surname>
    <affiliation>
     <orgname>Highland Technology, Inc.</orgname>
     <address>
      <email>rgaddi@highlandtechnology.com</email>
     </address>
    </affiliation>
    <contrib>Author of v120irqd</contrib>
   </author>

  </authorgroup>

  <copyright>
   <year>2015</year>
   <holder>Highland Technology, Inc.</holder>
  </copyright>

  <legalnotice>
	<para>All rights reserved.</para>

	<para>Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are
	met:</para>

	<orderedlist>
	  <listitem><para>Redistributions of source code must retain the above
	  copyright notice, this list of conditions and the following disclaimer.
	  </para></listitem>

	  <listitem><para>Redistributions in binary form must reproduce the
	  above copyright notice, this list of conditions and the following
	  disclaimer in the documentation and/or other materials provided with
	  the distribution.</para></listitem>

	  <listitem><para>Neither the name of the copyright holder nor the names
	  of its contributors may be used to endorse or promote products derived
	  from this software without specific prior written permission.
	  </para></listitem>

	</orderedlist>

	<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
	BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
	COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
	USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para>
  </legalnotice>
 </bookinfo>

<toc></toc>

	<chapter id="intro">
		<title>Introduction</title>
		<para>
	The Linux interfaces to the V120 allow both the V120 itself and VME modules
	controlled by it to be accessed by userspace code, with no need to write
	kernel drivers other than the one provided for the V120.
		</para>
	</chapter>

	<chapter id="interrupts">
		<title>Interrupts</title>
		<sect1 id="irqintro">
			<title>VME Interrupts</title>
			<para>
		VME modules can request interrupts by asserting (low) the open-drain
		IRQ lines (7 downto 1).  When a module asserts an interrupt, the
		interrupt responder module must perform an <acronym>IACK</acronym>
		Interrupt Acknowledge cycle to fetch the interrupt vector from the
		module; this is a (generally user-programmed) value that identifies
		the interrupting card, since multiple VME modules can interrupt on
		the same interrupt line.
			</para><para>
		From here, VME modules can be divided into two types.  A <acronym>
		ROAK</acronym> module will Release on AcKnowledge, and thus let go
		of the IRQ line.  A <acronym>RORA</acronym> module will Release on
		Register Access, meaning that a further action must be taken by the
		VME master to complete the interrupt cycle.
			</para><para>
		The V120 acts as both a bus master and an interrupt responder.
		However, since decisions about priority and how to handle RORA
		modules are policy questions that on a module by module and system
		by system basis, the generation of IACK cycles and any RORA
		completions are left to the userspace program.
			</para>
			<para>
		As will be discussed further, the user has the option to either poll
		on the interrupt status or to configure individual IRQ lines to generate
		true PCIe MSI interrupts.
			</para>
		</sect1>
		<sect1 id="irqapi-polling">
			<title>IRQ Polling</title>
			<para>
		An application can periodically check the <structfield>IRQSTATUS
		</structfield> register, which provides the current status of the
		IRQ lines.  This is less efficient than using true interrupts, but
		easier and places fewer rules on how interrupts must be handled.
			</para><para>
		Having used <function>v120_open</function> or <function>v120_next
		</function> to get a handle to a given V120, <function>v120_get_irq
		</function> returns a <structname>V120_IRQ</structname> for that
		V120.  At that point, processing interrupts is as simple as checking
		periodically to see which interrupt requests are active, pulling the
		IACK vectors, and serving them appropriately.
			</para>
			<programlisting id="process_interrupts">
			<![CDATA[
void process_interrupts(V120_IRQ *pIrq)
{
	while (1) {
		uint32_t status = pIrq->irqstatus;
		int irq = 7;
		for (;;irq--) {
			if (irq == 0) return;
			if (status & (1 << irq)) {
				uint32_t vector = pIrq->iack_vector[irq];
				take_some_action(irq, vector);
			}
		}
	}
}
			]]>
			</programlisting>
		</sect1>
		<sect1 id="irqapi-driver">
			<title>Driver Interrupts</title>
			<para>
		More complicated but faster than polling is to use true interrupts.
		By setting bits 7-1 in the <structfield>IRQEN</structfield> register
		(available from the V120_IRQ*) IRQ7-1 respectively will generate
		real interrupts.  These interrupts will made available on a file
		handle, which can be retrieved by calling <function>v120_irq_open
		</function> on the <structname>V120_HANDLE </structname>, which
		opens the appropriate <filename>/dev/v120_qN </filename> device.
		This handle must be opened for exclusive read access; only one
		process is allowed to hold the interrupt device at a time.
			</para><para>
		Upon receipt of a PCIe interrupt (an interrupt selected in
		<structfield>IRQEN</structfield> has asserted), the  device
		acknowledges the V120 hardware and sets an interrupt pending flag.
		When the flag is clear, a call will block until the flag is set.
		When this flag is set, a <function>read </function>  call against
		the device will immediately return EOF and clear the flag.
			</para><para>
		This allows a user application to use a blocking <function>read
		</function> call to receive interrupts when they happen, likely from
		a background thread.  Alternatively, the application can use
		<function>select</function>, <function>poll</function>, or <function>
		epoll</function> to query this flag asynchronously, but must still
		use the <function>read</function> call to clear it.  The flag will
		never clear itself; if <function>poll</function> says that <function>
		read</function> won’t block then <function>read</function> won’t
		block.
			</para><para>
		The data from the <function>read</function> should be ignored, but
		this is the indication that there are now interrupts to process, as
		per the <function>process_interrupts</function> example in <xref
		linkend="irqapi-polling" />.
			</para><important><para>
		Whereas the polling system was insensitive to which interrupts were
		processed, when using true interrupts it is essential that the
		interrupts be iterated until all IRQ lines set in <structfield>IRQEN
		</structfield> are simultaneously clear, otherwise future interrupt
		notifications will not happen.  This is a mechanism to prevent
		errant VME modules from overwhelming the kernel, but can easily
		cause a userspace program to lock up.
			</para></important>
		</sect1>
		<sect1 id="v120irqd">
			<title>v120irqd Interrupt Daemon</title>
			<para>
		To allow multiple processes access to true interrupts, an interrupt
		dispatching mechanism is required.  Highland has provided
		<application>v120irqd</application>, which is a fairly simple daemon
		which takes ownership of all <filename>/dev/v120_qN</filename>
		devices and acts as a server on a Unix socket. Client applications
		can connect to this socket and request interrupts based on
		combinations of crate ID, IRQ number, and IACK vector, using
		functions defined in <filename>v120irqd.h</filename> and provided in
		libV120irqd.
			</para>
			<para>
		This greatly simplifies writing interrupt-driven applications, as
		the daemon takes over management of the IRQEN register on all
		crates.  Having initialized the interrupt requests using <function>
		v120irqd_client</function> to connect to the server and <function>
		v120irqd_request</function> to define the requested interrupt, the
		application can use the blocking call <function>v120irqd_getinterrupt
		</function> to wait on an interrupt notification from the server,
		and <function>v120irqd_ack</function> to acknowledge receipt and
		allow the daemon to go on processing other interrupts.
			</para><para>
		As <function>v120irqd_getinterrupt</function> is a blocking call,
		the application will probably want to run it in a background
		thread.  To avoid blocking on <function>v120irqd_getinterrupt
		</function>, either <function>select</function>/<function>poll
		</function>/<function>epoll</function> or SIGIO based asynchronous
		IO can be used, since the socket handle to the daemon behaves like
		any other socket.
			</para><para>
		To use <application>v120irqd</application>, install it and make sure
		that it is executed as a part of the system startup process, which
		varies from system to system (init, systemd, upstart) and as a
		result the installer makes no attempt to handle this step.
		Additionally, v120irqd makes extensive use of syslog functionality
		to provide diagnostic messages.  These will go into <filename>
		/var/log/syslog</filename> by default; a sample rsyslogd file for
		diverting non-critical messages to <filename>/var/log/v120irqd.log
		</filename> is provided as well.
			</para><para>
		See <filename>examples/v120irqd</filename> for client examples.
			</para>
		</sect1>

		<sect1 id="irqapi-v120irqd">
			<title>v120irqd API Reference</title>
!Iinclude/v120irqd.h
		</sect1>
	</chapter>





</book>
